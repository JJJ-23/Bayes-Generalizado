{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JJJ-23/Bayes-Generalizado/blob/main/Python%20bayes\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "43f10f64",
      "metadata": {
        "id": "43f10f64"
      },
      "source": [
        "\n",
        "# Generalised Bayes con PyMC y ArviZ\n",
        "\n",
        "Este *notebook* veremos distintos **posteriores generalizados**:\n",
        "$$\n",
        "\\pi^L(\\theta \\mid x_{1:n}) \\propto \\pi(\\theta)\\,\\exp\\!\\Big(-\\lambda \\sum_{i=1}^n \\ell(x_i;\\theta)\\Big),\n",
        "$$\n",
        "donde $\\ell$ es una **función de pérdida** y $\\lambda>0$ es una temperatura (o *learning rate*).\n",
        "\n",
        "Usaremos un **Gaussian location model** simple con varianza conocida y compararemos cuatro pérdidas:\n",
        "\n",
        "1. **NLL** (Negative Log-Likelihood) Gaussiana — no robusta.\n",
        "2. **Divergencia de Potencia de Densidad (DPD)** estilo Gibbs: $\\ell_{\\text{DPD},\\alpha}(x;\\theta)=1-p_{\\theta}(x)^\\alpha$, con $\\alpha \\in (0,1]$.\n",
        "3. **L1**: $\\ell_{L1}(x;\\theta)=|x-\\theta|/\\sigma$.\n",
        "4. **Huber** (robusta, parámetro $\\delta$).\n",
        "\n",
        "Veremos dos escenarios de datos:\n",
        "- **Sin outliers** (datos limpios).\n",
        "- **Con outliers** (contaminación del 10%).\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "22e55ff4",
      "metadata": {
        "id": "22e55ff4"
      },
      "outputs": [],
      "source": [
        "\n",
        "# ==== Setup ====\n",
        "import numpy as np\n",
        "import pymc as pm\n",
        "import arviz as az\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.display import display, Markdown, clear_output\n",
        "import ipywidgets as widgets\n",
        "\n",
        "# Estilo \"moderno\" y minimalista para las figuras\n",
        "az.style.use(\"seaborn-v0_8-colorblind\")\n",
        "plt.rcParams.update({\n",
        "    \"figure.figsize\": (6, 4),\n",
        "    \"axes.grid\": False,\n",
        "    \"axes.spines.top\": False,\n",
        "    \"axes.spines.right\": False,\n",
        "    \"axes.titleweight\": \"bold\",\n",
        "    \"axes.labelsize\": 12,\n",
        "    \"xtick.labelsize\": 10,\n",
        "    \"ytick.labelsize\": 10,\n",
        "})\n",
        "\n",
        "RNG = np.random.default_rng(42)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c01ef11a",
      "metadata": {
        "id": "c01ef11a"
      },
      "source": [
        "\n",
        "## 1) Generación de datos\n",
        "\n",
        "Modelo verdadero: \\(Y_i \\sim \\mathcal{N}(\\mu^\\*, \\sigma^2)\\) con \\(\\mu^\\*=0\\) y \\(\\sigma=1\\).\n",
        "Creamos dos *datasets*: limpio y con *outliers*.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c49680a7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c49680a7",
        "outputId": "335b7699-2018-4765-eab6-6411a3e8f339"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "n = 500, outliers = 50\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# ==== Datos ====\n",
        "n = 500\n",
        "mu_star = 0.0\n",
        "sigma = 1.0\n",
        "\n",
        "y_clean = RNG.normal(mu_star, sigma, size=n)\n",
        "\n",
        "# Contaminación: 10% de puntos desplazados fuertemente\n",
        "cont_frac = 0.10\n",
        "k = int(n * cont_frac)\n",
        "y_out = y_clean.copy()\n",
        "outlier_locs = np.random.default_rng(7).choice(n, size=k, replace=False)\n",
        "y_out[outlier_locs] = np.random.default_rng(8).normal(8.0, 1.0, size=k)  # \"outliers\" positivos\n",
        "\n",
        "print(f\"n = {n}, outliers = {k}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Histograma de y_clean\n",
        "plt.figure()\n",
        "plt.hist(y_clean, bins=20, edgecolor='black')\n",
        "plt.title(\"Histograma - Datos limpios (y_clean)\")\n",
        "plt.xlabel(\"y\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.show()\n",
        "\n",
        "# Histograma de y_out (con outliers)\n",
        "plt.figure()\n",
        "plt.hist(y_out, bins=20, edgecolor='black')\n",
        "plt.title(\"Histograma - Datos con outliers (y_out)\")\n",
        "plt.xlabel(\"y\")\n",
        "plt.ylabel(\"Frecuencia\")\n",
        "plt.show()\n",
        "\n",
        "# Vistazo a los primeros elementos\n",
        "print(\"Primeros 10 de y_clean:\", np.round(y_clean[:10], 3))\n",
        "print(\"Primeros 10 de y_out:  \", np.round(y_out[:10], 3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 848
        },
        "id": "7F3mN43Vm8Wz",
        "outputId": "89fd9046-e03b-4d84-d463-58aaaebc526e"
      },
      "id": "7F3mN43Vm8Wz",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Primeros 10 de y_clean: [ 0.305 -1.04   0.75   0.941 -1.951 -1.302  0.128 -0.316 -0.017 -0.853]\n",
            "Primeros 10 de y_out:   [ 0.305 -1.04   9.505  0.941 -1.951 -1.302  0.128 -0.316 -0.017 -0.853]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "dc29d539",
      "metadata": {
        "id": "dc29d539"
      },
      "source": [
        "\n",
        "## 2) Pérdidas para el Gibbs posterior\n",
        "\n",
        "Para cada pérdida $\\ell$ construiremos un **posterior generalisado** en PyMC añadiendo un `pm.Potential`\n",
        "con $-\\lambda \\sum_i \\ell(x_i;\\theta)$.\n",
        "\n",
        "> Nota: Usamos $\\sigma$ conocida para simplificar.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ff54221c",
      "metadata": {
        "id": "ff54221c"
      },
      "outputs": [],
      "source": [
        "\n",
        "# ==== Pérdidas ====\n",
        "def _residual(y, mu, sigma):\n",
        "    # Convertimos y (numpy) a constante simbólica compatible con PyMC\n",
        "    yv = pm.math.constant(y)\n",
        "    return (yv - mu) / sigma\n",
        "\n",
        "def loss_nll(y, mu, sigma=1.0):\n",
        "    # -log verosimilitud (omitimos constantes independientes de mu)\n",
        "    r = _residual(y, mu, sigma)\n",
        "    return 0.5 * r*r\n",
        "\n",
        "def loss_dpd(y, mu, sigma=1.0, alpha=0.5):\n",
        "    '''\n",
        "    l(y; mu) = 1 - f(y|mu)^alpha, con f normal.\n",
        "    log f = -0.5*((y-mu)/sigma)^2 - log(sqrt(2π)*sigma)\n",
        "    '''\n",
        "    r = _residual(y, mu, sigma)\n",
        "    logf = -0.5 * r*r - np.log(np.sqrt(2*np.pi) * sigma)\n",
        "    return 1.0 - pm.math.exp(alpha * logf)\n",
        "\n",
        "def loss_l1(y, mu, sigma=1.0):\n",
        "    # |y - mu| / sigma\n",
        "    r = _residual(y, mu, sigma)\n",
        "    return pm.math.abs(r)\n",
        "\n",
        "def loss_huber(y, mu, sigma=1.0, c=1.345):\n",
        "    '''\n",
        "    Pérdida de Huber (con r estandarizado):\n",
        "      l = 0.5*r^2, si |r| <= c\n",
        "          c*|r| - 0.5*c^2, si |r| > c\n",
        "    '''\n",
        "    r = _residual(y, mu, sigma)\n",
        "    absr = pm.math.abs(r)\n",
        "    quad = 0.5 * r*r\n",
        "    lin  = c * absr - 0.5 * (c**2)\n",
        "    return pm.math.switch(pm.math.le(absr, c), quad, lin)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bedebf90",
      "metadata": {
        "id": "bedebf90"
      },
      "source": [
        "\n",
        "## 3) Gibbs posterior en PyMC\n",
        "\n",
        "Función auxiliar para construir un modelo PyMC con:\n",
        "- Prior: $\\mu \\sim \\mathcal{N}(0, 10^2)$.\n",
        "- Potencial: $-\\lambda \\sum_i \\ell(x_i;\\theta)$.\n",
        "\n",
        "Luego muestreamos con NUTS y graficamos el **posterior** con ArviZ mostrando **solo**:\n",
        "- La densidad posterior.\n",
        "- Una marca de la **media** posterior.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9ca928a7",
      "metadata": {
        "id": "9ca928a7"
      },
      "outputs": [],
      "source": [
        "\n",
        "def fit_gibbs_posterior(y, loss_fn, loss_kwargs=None, lam=1.0, draws=1000, chains=2, tune=800, sigma=1.0, random_seed=123):\n",
        "    loss_kwargs = loss_kwargs or {}\n",
        "    with pm.Model() as m:\n",
        "        mu = pm.Normal(\"mu\", mu=0.0, sigma=10.0)\n",
        "        loss_terms = loss_fn(y, mu, sigma=sigma, **loss_kwargs)\n",
        "        total_loss = pm.Deterministic(\"total_loss\", pm.math.sum(loss_terms))\n",
        "        pm.Potential(\"gibbs_potential\", -lam * total_loss)\n",
        "        idata = pm.sample(draws=draws, chains=chains, tune=tune, random_seed=random_seed, target_accept=0.9, progressbar=True, cores=1)\n",
        "    return idata\n",
        "\n",
        "def plot_posterior_mean_only(idata, var_name=\"mu\", title=None):\n",
        "    ax = az.plot_posterior(\n",
        "        idata,\n",
        "        var_names=[var_name],\n",
        "        point_estimate=\"mean\",\n",
        "        hdi_prob=None,    # ocultamos intervalos\n",
        "        ref_val=None,     # sin líneas de referencia\n",
        "        kind=\"hist\",      # histograma minimalista\n",
        "        figsize=(6, 4),\n",
        "    )\n",
        "    if isinstance(ax, np.ndarray):\n",
        "        ax = ax[0]\n",
        "    if title:\n",
        "        ax.set_title(title)\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "70a89f7f",
      "metadata": {
        "id": "70a89f7f"
      },
      "source": [
        "\n",
        "## 4) Panel interactivo\n",
        "\n",
        "Usa los *sliders* para elegir $\\lambda$, $\\alpha$, $\\delta$ (Huber), la pérdida y el tipo de datos; luego ejecuta el muestreo.\n",
        "*(Para evitar esperas largas en vivo, dejamos `draws=1000` por defecto.)*\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Widgets\n",
        "loss_dropdown = widgets.Dropdown(\n",
        "    options=[\"NLL\", \"DPD\", \"L1\", \"Huber\"],\n",
        "    value=\"DPD\",\n",
        "    description=\"Pérdida:\"\n",
        ")\n",
        "\n",
        "data_dropdown = widgets.Dropdown(\n",
        "    options=[\"Limpio\", \"Outliers\"],\n",
        "    value=\"Limpio\",\n",
        "    description=\"Datos:\"\n",
        ")\n",
        "\n",
        "lam_slider = widgets.FloatSlider(value=1.0, min=0.1, max=5.0, step=0.1, description=\"λ (lambda)\")\n",
        "alpha_slider = widgets.FloatSlider(value=0.5, min=0.05, max=1.5, step=0.05, description=\"α (DPD)\")\n",
        "c_slider = widgets.FloatSlider(value=1.345, min=0.5, max=6.0, step=0.05, description=\"δ (Huber)\")\n",
        "draws_slider = widgets.IntSlider(value=1000, min=300, max=2000, step=100, description=\"draws\")\n",
        "\n",
        "run_button = widgets.Button(description=\"Ejecutar muestreo\", button_style=\"primary\")\n",
        "\n",
        "out = widgets.Output()\n",
        "\n",
        "def on_run_clicked(_):\n",
        "    with out:\n",
        "        clear_output(wait=True)\n",
        "        loss_name = loss_dropdown.value\n",
        "        dataset = data_dropdown.value\n",
        "        lam = lam_slider.value\n",
        "        alpha = alpha_slider.value\n",
        "        delta = c_slider.value\n",
        "        draws = draws_slider.value\n",
        "\n",
        "        # Selección de datos\n",
        "        y = y_clean if dataset == \"Limpio\" else y_out\n",
        "\n",
        "        # Selección de pérdida y kwargs\n",
        "        if loss_name == \"NLL\":\n",
        "            fn = loss_nll; kwargs = {}\n",
        "        elif loss_name == \"DPD\":\n",
        "            fn = loss_dpd; kwargs = {\"alpha\": alpha}\n",
        "        elif loss_name == \"L1\":\n",
        "            fn = loss_l1; kwargs = {}\n",
        "        elif loss_name == \"Huber\":\n",
        "            fn = loss_huber; kwargs = {\"c\": delta}\n",
        "        else:\n",
        "            raise ValueError(\"Pérdida desconocida.\")\n",
        "\n",
        "        title = f\"{dataset} - {loss_name} (λ={lam:.2f}\" + (f\", α={alpha:.2f}\" if loss_name=='DPD' else \"\") + (f\", δ={delta:.2f}\" if loss_name=='Huber' else \"\") + \")\"\n",
        "\n",
        "        display(Markdown(f\"**Ejecutando:** {title}  \\n*(esto puede tardar un poco)*\"))\n",
        "        idata = fit_gibbs_posterior(y, loss_fn=fn, loss_kwargs=kwargs, lam=lam, draws=draws, chains=2, tune=max(600, int(0.8*draws)), sigma=sigma, random_seed=123)\n",
        "        plot_posterior_mean_only(idata, var_name=\"mu\", title=title)\n",
        "\n",
        "        # Tabla pequeña con la media posterior\n",
        "        pmu = idata.posterior[\"mu\"].values.reshape(-1)\n",
        "        display(Markdown(f\"**Media posterior de μ:** {pmu.mean():.3f}\"))\n",
        "\n",
        "run_button.on_click(on_run_clicked)\n",
        "\n",
        "controls = widgets.VBox([widgets.HBox([loss_dropdown, data_dropdown]), lam_slider, alpha_slider, c_slider, draws_slider, run_button])\n",
        "display(controls, out)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209,
          "referenced_widgets": [
            "3722f8d659ba4de081ac1d1ff1661f5e",
            "683ac512705542a9bf7ee09c13533f50",
            "a08a8af299a94fde8ac6dd7cd1b7ee52",
            "b1815b0f1fa3448aacd05bab585d1fcc",
            "735d8731a4714347a59dce308984540a",
            "385f0289dae04f74a5c43c05abef8183",
            "cdbe66c58b9343b0b6a689dfaaa50c36",
            "99e45d75d582493cb9e9a07cc8e17861",
            "2f3f2d22bce94ee28e08cb796fd5cb39",
            "4686c9be6e4544f793b5b9a5fb09ff57",
            "baaa83f91e0046309eed1a639a4abf55",
            "2fed359410704f0bae2e9e033cbabe84",
            "84f193c62f9546ca85dfbb9bc95059bb",
            "1b9604c032ea4169af077ce69188b0f6",
            "3b4f6205f8c6445fa73e2e9023740c40",
            "bf6172e5de57420c81b82cd58995efb2",
            "d8dd2a22ad984a96a215905cca9cbac2",
            "a4aa958557274a66853efdbf0deded0d",
            "09eed0d5e3964e9c895267e8581bd253",
            "20a170ce218e4e8db4471abdc83089e0",
            "494c8279cc8b48cebc0ae8467b3e6e39",
            "ec887ed4b78a46eba9f4aaa6f7e73030",
            "3f912356c5b848a7adaaa678f4b03fe4",
            "806444748aa44810a6fc8281125b59bc",
            "d39077a65aec4b95a0dd618074a0670a",
            "e61689bfa72b46feb509b4817294e42d",
            "ad1e1180cf9244c0b4c16dbc7a683c11"
          ]
        },
        "id": "8QsIx8I4mIVi",
        "outputId": "12d77650-2214-4a61-a5b6-b64ec637305a"
      },
      "id": "8QsIx8I4mIVi",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(HBox(children=(Dropdown(description='Pérdida:', index=1, options=('NLL', 'DPD', 'L1', 'Huber'),…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3722f8d659ba4de081ac1d1ff1661f5e"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Output()"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "e61689bfa72b46feb509b4817294e42d"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "i2nSySGBnuAM"
      },
      "id": "i2nSySGBnuAM",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "language_info": {
      "name": "python"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "3722f8d659ba4de081ac1d1ff1661f5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_683ac512705542a9bf7ee09c13533f50",
              "IPY_MODEL_a08a8af299a94fde8ac6dd7cd1b7ee52",
              "IPY_MODEL_b1815b0f1fa3448aacd05bab585d1fcc",
              "IPY_MODEL_735d8731a4714347a59dce308984540a",
              "IPY_MODEL_385f0289dae04f74a5c43c05abef8183",
              "IPY_MODEL_cdbe66c58b9343b0b6a689dfaaa50c36"
            ],
            "layout": "IPY_MODEL_99e45d75d582493cb9e9a07cc8e17861"
          }
        },
        "683ac512705542a9bf7ee09c13533f50": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_2f3f2d22bce94ee28e08cb796fd5cb39",
              "IPY_MODEL_4686c9be6e4544f793b5b9a5fb09ff57"
            ],
            "layout": "IPY_MODEL_baaa83f91e0046309eed1a639a4abf55"
          }
        },
        "a08a8af299a94fde8ac6dd7cd1b7ee52": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatSliderView",
            "continuous_update": true,
            "description": "λ (lambda)",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_2fed359410704f0bae2e9e033cbabe84",
            "max": 5,
            "min": 0.1,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": ".2f",
            "step": 0.1,
            "style": "IPY_MODEL_84f193c62f9546ca85dfbb9bc95059bb",
            "value": 1
          }
        },
        "b1815b0f1fa3448aacd05bab585d1fcc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatSliderView",
            "continuous_update": true,
            "description": "α (DPD)",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_1b9604c032ea4169af077ce69188b0f6",
            "max": 1.5,
            "min": 0.05,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": ".2f",
            "step": 0.05,
            "style": "IPY_MODEL_3b4f6205f8c6445fa73e2e9023740c40",
            "value": 0.5
          }
        },
        "735d8731a4714347a59dce308984540a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatSliderView",
            "continuous_update": true,
            "description": "δ (Huber)",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_bf6172e5de57420c81b82cd58995efb2",
            "max": 6,
            "min": 0.5,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": ".2f",
            "step": 0.05,
            "style": "IPY_MODEL_d8dd2a22ad984a96a215905cca9cbac2",
            "value": 1.345
          }
        },
        "385f0289dae04f74a5c43c05abef8183": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntSliderModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "IntSliderModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "IntSliderView",
            "continuous_update": true,
            "description": "draws",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_a4aa958557274a66853efdbf0deded0d",
            "max": 2000,
            "min": 300,
            "orientation": "horizontal",
            "readout": true,
            "readout_format": "d",
            "step": 100,
            "style": "IPY_MODEL_09eed0d5e3964e9c895267e8581bd253",
            "value": 1000
          }
        },
        "cdbe66c58b9343b0b6a689dfaaa50c36": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "primary",
            "description": "Ejecutar muestreo",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_20a170ce218e4e8db4471abdc83089e0",
            "style": "IPY_MODEL_494c8279cc8b48cebc0ae8467b3e6e39",
            "tooltip": ""
          }
        },
        "99e45d75d582493cb9e9a07cc8e17861": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2f3f2d22bce94ee28e08cb796fd5cb39": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "NLL",
              "DPD",
              "L1",
              "Huber"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Pérdida:",
            "description_tooltip": null,
            "disabled": false,
            "index": 1,
            "layout": "IPY_MODEL_ec887ed4b78a46eba9f4aaa6f7e73030",
            "style": "IPY_MODEL_3f912356c5b848a7adaaa678f4b03fe4"
          }
        },
        "4686c9be6e4544f793b5b9a5fb09ff57": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "Limpio",
              "Outliers"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "Datos:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_806444748aa44810a6fc8281125b59bc",
            "style": "IPY_MODEL_d39077a65aec4b95a0dd618074a0670a"
          }
        },
        "baaa83f91e0046309eed1a639a4abf55": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2fed359410704f0bae2e9e033cbabe84": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "84f193c62f9546ca85dfbb9bc95059bb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "1b9604c032ea4169af077ce69188b0f6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3b4f6205f8c6445fa73e2e9023740c40": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "bf6172e5de57420c81b82cd58995efb2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d8dd2a22ad984a96a215905cca9cbac2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "a4aa958557274a66853efdbf0deded0d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "09eed0d5e3964e9c895267e8581bd253": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "SliderStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "SliderStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": "",
            "handle_color": null
          }
        },
        "20a170ce218e4e8db4471abdc83089e0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "494c8279cc8b48cebc0ae8467b3e6e39": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "ec887ed4b78a46eba9f4aaa6f7e73030": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3f912356c5b848a7adaaa678f4b03fe4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "806444748aa44810a6fc8281125b59bc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d39077a65aec4b95a0dd618074a0670a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "e61689bfa72b46feb509b4817294e42d": {
          "model_module": "@jupyter-widgets/output",
          "model_name": "OutputModel",
          "model_module_version": "1.0.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/output",
            "_model_module_version": "1.0.0",
            "_model_name": "OutputModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/output",
            "_view_module_version": "1.0.0",
            "_view_name": "OutputView",
            "layout": "IPY_MODEL_ad1e1180cf9244c0b4c16dbc7a683c11",
            "msg_id": "",
            "outputs": []
          }
        },
        "ad1e1180cf9244c0b4c16dbc7a683c11": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}